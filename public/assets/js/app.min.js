function noop() { }
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}
class HtmlTag {
    constructor(anchor = null) {
        this.a = anchor;
        this.e = this.n = null;
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.h(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.32.3' }, detail)));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

/* src/svelte/components/logo.svelte generated by Svelte v3.32.3 */
const file = "src/svelte/components/logo.svelte";

// (24:2) {:else}
function create_else_block(ctx) {
	let img_1;
	let img_1_src_value;

	const block = {
		c: function create() {
			img_1 = element("img");
			if (img_1.src !== (img_1_src_value = "/assets/img/dbushell-logotype.svg")) attr_dev(img_1, "src", img_1_src_value);
			attr_dev(img_1, "alt", "David Bushell");
			add_location(img_1, file, 24, 4, 482);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img_1, anchor);
			/*img_1_binding*/ ctx[3](img_1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img_1);
			/*img_1_binding*/ ctx[3](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(24:2) {:else}",
		ctx
	});

	return block;
}

// (22:2) {#if svg}
function create_if_block(ctx) {
	let html_tag;
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(/*svg*/ ctx[1], target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*svg*/ 2) html_tag.p(/*svg*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(22:2) {#if svg}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let a;
	let span;
	let t1;

	function select_block_type(ctx, dirty) {
		if (/*svg*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			a = element("a");
			span = element("span");
			span.textContent = `${/*label*/ ctx[2]}`;
			t1 = space();
			if_block.c();
			attr_dev(span, "class", "Hidden");
			add_location(span, file, 20, 2, 404);
			attr_dev(a, "href", "/");
			attr_dev(a, "class", "Logo");
			add_location(a, file, 19, 0, 376);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, span);
			append_dev(a, t1);
			if_block.m(a, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(a, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Logo", slots, []);
	const label = `Homepage`;
	let img;
	let svg;

	onMount(() => {
		const xhr = new XMLHttpRequest();
		xhr.open("GET", img.src, true);
		xhr.send();

		xhr.addEventListener("loadend", response => {
			if (response.target.status === 200) {
				$$invalidate(1, svg = response.target.responseText);
			}
		});
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Logo> was created with unknown prop '${key}'`);
	});

	function img_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			img = $$value;
			$$invalidate(0, img);
		});
	}

	$$self.$capture_state = () => ({ onMount, label, img, svg });

	$$self.$inject_state = $$props => {
		if ("img" in $$props) $$invalidate(0, img = $$props.img);
		if ("svg" in $$props) $$invalidate(1, svg = $$props.svg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [img, svg, label, img_1_binding];
}

class Logo extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Logo",
			options,
			id: create_fragment.name
		});
	}
}

/* src/svelte/components/contact.svelte generated by Svelte v3.32.3 */
const file$1 = "src/svelte/components/contact.svelte";

// (59:0) {:else}
function create_else_block$1(ctx) {
	let form;
	let p0;
	let t1;
	let ul;
	let li0;
	let label0;
	let t3;
	let input0;
	let input0_disabled_value;
	let t4;
	let li1;
	let label1;
	let t6;
	let input1;
	let input1_disabled_value;
	let t7;
	let li2;
	let label2;
	let t9;
	let textarea;
	let textarea_disabled_value;
	let t10;
	let li3;
	let h4;
	let svg;
	let path;
	let t11;
	let span0;
	let t13;
	let p1;
	let small0;
	let t15;
	let p2;
	let small1;
	let t16;
	let a;
	let t18;
	let t19;
	let label3;
	let input2;
	let input2_disabled_value;
	let t20;
	let span1;
	let t22;
	let li4;
	let button;
	let t23;
	let button_disabled_value;
	let t24;
	let li5;
	let label4;
	let t26;
	let input3;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			p0 = element("p");
			p0.textContent = "Email me above or use the form below:";
			t1 = space();
			ul = element("ul");
			li0 = element("li");
			label0 = element("label");
			label0.textContent = "Name";
			t3 = space();
			input0 = element("input");
			t4 = space();
			li1 = element("li");
			label1 = element("label");
			label1.textContent = "Email Address";
			t6 = space();
			input1 = element("input");
			t7 = space();
			li2 = element("li");
			label2 = element("label");
			label2.textContent = "Enquiry";
			t9 = space();
			textarea = element("textarea");
			t10 = space();
			li3 = element("li");
			h4 = element("h4");
			svg = svg_element("svg");
			path = svg_element("path");
			t11 = space();
			span0 = element("span");
			span0.textContent = "Your data and privacy";
			t13 = space();
			p1 = element("p");
			small0 = element("small");
			small0.textContent = "This form securely emails your data to my encrypted inbox for the\n            purpose of responding to your enquiry and conducting business with\n            you.";
			t15 = space();
			p2 = element("p");
			small1 = element("small");
			t16 = text("See my\n            ");
			a = element("a");
			a.textContent = "Privacy Policy";
			t18 = text("\n            for more information.");
			t19 = space();
			label3 = element("label");
			input2 = element("input");
			t20 = space();
			span1 = element("span");
			span1.textContent = "I consent to my data being used as outlined above";
			t22 = space();
			li4 = element("li");
			button = element("button");
			t23 = text("Send Message");
			t24 = space();
			li5 = element("li");
			label4 = element("label");
			label4.textContent = "If you’re human leave the next field blank!";
			t26 = space();
			input3 = element("input");
			add_location(p0, file$1, 60, 4, 1524);
			attr_dev(label0, "class", "Cursive");
			attr_dev(label0, "for", "contact-name");
			add_location(label0, file$1, 63, 8, 1610);
			input0.required = true;
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "Field");
			attr_dev(input0, "id", "contact-name");
			attr_dev(input0, "name", "name");
			attr_dev(input0, "maxlength", "100");
			input0.disabled = input0_disabled_value = !/*isLive*/ ctx[2];
			add_location(input0, file$1, 64, 8, 1673);
			add_location(li0, file$1, 62, 6, 1597);
			attr_dev(label1, "class", "Cursive");
			attr_dev(label1, "for", "contact-email");
			add_location(label1, file$1, 74, 8, 1884);
			input1.required = true;
			attr_dev(input1, "type", "email");
			attr_dev(input1, "class", "Field");
			attr_dev(input1, "id", "contact-email");
			attr_dev(input1, "name", "replyTo");
			attr_dev(input1, "placeholder", "me@example.com…");
			attr_dev(input1, "maxlength", "200");
			input1.disabled = input1_disabled_value = !/*isLive*/ ctx[2];
			add_location(input1, file$1, 75, 8, 1957);
			add_location(li1, file$1, 73, 6, 1871);
			attr_dev(label2, "class", "Cursive");
			attr_dev(label2, "for", "contact-enquiry");
			add_location(label2, file$1, 86, 8, 2213);
			textarea.required = true;
			attr_dev(textarea, "class", "Field");
			attr_dev(textarea, "id", "contact-enquiry");
			attr_dev(textarea, "name", "enquiry");
			attr_dev(textarea, "rows", "5");
			attr_dev(textarea, "maxlength", "10000");
			attr_dev(textarea, "placeholder", "Tell me about your project…");
			textarea.disabled = textarea_disabled_value = !/*isLive*/ ctx[2];
			add_location(textarea, file$1, 87, 8, 2282);
			add_location(li2, file$1, 85, 6, 2200);
			attr_dev(path, "d", "M14 9v2h-4V9c0-1.104.897-2 2-2s2 .896 2 2zm10 3c0 6.627-5.373\n              12-12 12S0 18.627 0 12 5.373 0 12 0s12 5.373 12 12zm-8-1h-1V9a3 3\n              0 0 0-6 0v2H8v6h8v-6z");
			add_location(path, file$1, 104, 12, 2735);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			add_location(svg, file$1, 99, 10, 2591);
			add_location(span0, file$1, 109, 10, 2967);
			attr_dev(h4, "class", "Privacy");
			add_location(h4, file$1, 98, 8, 2560);
			add_location(small0, file$1, 112, 10, 3038);
			add_location(p1, file$1, 111, 8, 3024);
			attr_dev(a, "href", "/privacy/");
			attr_dev(a, "target", "_blank");
			add_location(a, file$1, 121, 12, 3313);
			add_location(small1, file$1, 119, 10, 3274);
			add_location(p2, file$1, 118, 8, 3260);
			input2.required = true;
			attr_dev(input2, "type", "checkbox");
			attr_dev(input2, "class", "Hidden | Checkbox");
			attr_dev(input2, "id", "contact-privacy");
			attr_dev(input2, "name", "privacy");
			attr_dev(input2, "autocomplete", "off");
			input2.disabled = input2_disabled_value = !/*isLive*/ ctx[2];
			add_location(input2, file$1, 126, 10, 3482);
			add_location(span1, file$1, 135, 10, 3746);
			attr_dev(label3, "for", "contact-privacy");
			add_location(label3, file$1, 125, 8, 3442);
			add_location(li3, file$1, 97, 6, 2547);
			attr_dev(button, "class", "Button");
			attr_dev(button, "type", "submit");
			button.disabled = button_disabled_value = !/*isLive*/ ctx[2];
			add_location(button, file$1, 139, 8, 3857);
			add_location(li4, file$1, 138, 6, 3844);
			attr_dev(label4, "for", "contact-human");
			add_location(label4, file$1, 144, 8, 4001);
			attr_dev(input3, "type", "text");
			attr_dev(input3, "id", "contact-human");
			attr_dev(input3, "name", "whodis");
			attr_dev(input3, "tabindex", "-1");
			attr_dev(input3, "autocomplete", "off");
			add_location(input3, file$1, 147, 8, 4108);
			attr_dev(li5, "class", "Hidden");
			add_location(li5, file$1, 143, 6, 3973);
			attr_dev(ul, "class", "Form");
			add_location(ul, file$1, 61, 4, 1573);
			attr_dev(form, "method", "post");
			attr_dev(form, "action", "/contact/");
			add_location(form, file$1, 59, 2, 1459);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, p0);
			append_dev(form, t1);
			append_dev(form, ul);
			append_dev(ul, li0);
			append_dev(li0, label0);
			append_dev(li0, t3);
			append_dev(li0, input0);
			append_dev(ul, t4);
			append_dev(ul, li1);
			append_dev(li1, label1);
			append_dev(li1, t6);
			append_dev(li1, input1);
			append_dev(ul, t7);
			append_dev(ul, li2);
			append_dev(li2, label2);
			append_dev(li2, t9);
			append_dev(li2, textarea);
			append_dev(ul, t10);
			append_dev(ul, li3);
			append_dev(li3, h4);
			append_dev(h4, svg);
			append_dev(svg, path);
			append_dev(h4, t11);
			append_dev(h4, span0);
			append_dev(li3, t13);
			append_dev(li3, p1);
			append_dev(p1, small0);
			append_dev(li3, t15);
			append_dev(li3, p2);
			append_dev(p2, small1);
			append_dev(small1, t16);
			append_dev(small1, a);
			append_dev(small1, t18);
			append_dev(li3, t19);
			append_dev(li3, label3);
			append_dev(label3, input2);
			/*input2_binding*/ ctx[6](input2);
			append_dev(label3, t20);
			append_dev(label3, span1);
			append_dev(ul, t22);
			append_dev(ul, li4);
			append_dev(li4, button);
			append_dev(button, t23);
			append_dev(ul, t24);
			append_dev(ul, li5);
			append_dev(li5, label4);
			append_dev(li5, t26);
			append_dev(li5, input3);
			/*input3_binding*/ ctx[7](input3);

			if (!mounted) {
				dispose = listen_dev(form, "submit", /*onSubmit*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*isLive*/ 4 && input0_disabled_value !== (input0_disabled_value = !/*isLive*/ ctx[2])) {
				prop_dev(input0, "disabled", input0_disabled_value);
			}

			if (dirty & /*isLive*/ 4 && input1_disabled_value !== (input1_disabled_value = !/*isLive*/ ctx[2])) {
				prop_dev(input1, "disabled", input1_disabled_value);
			}

			if (dirty & /*isLive*/ 4 && textarea_disabled_value !== (textarea_disabled_value = !/*isLive*/ ctx[2])) {
				prop_dev(textarea, "disabled", textarea_disabled_value);
			}

			if (dirty & /*isLive*/ 4 && input2_disabled_value !== (input2_disabled_value = !/*isLive*/ ctx[2])) {
				prop_dev(input2, "disabled", input2_disabled_value);
			}

			if (dirty & /*isLive*/ 4 && button_disabled_value !== (button_disabled_value = !/*isLive*/ ctx[2])) {
				prop_dev(button, "disabled", button_disabled_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			/*input2_binding*/ ctx[6](null);
			/*input3_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(59:0) {:else}",
		ctx
	});

	return block;
}

// (52:18) 
function create_if_block_1(ctx) {
	let p;
	let strong;

	const block = {
		c: function create() {
			p = element("p");
			strong = element("strong");
			strong.textContent = "There was an error submitting your enquiry. Please email me at the address\n      above.";
			add_location(strong, file$1, 53, 4, 1325);
			attr_dev(p, "class", "Error");
			add_location(p, file$1, 52, 2, 1303);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, strong);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(52:18) ",
		ctx
	});

	return block;
}

// (48:0) {#if isSuccess}
function create_if_block$1(ctx) {
	let p;
	let strong;

	const block = {
		c: function create() {
			p = element("p");
			strong = element("strong");
			strong.textContent = "Thank you for your enquiry, I’ll reply as soon as possible.";
			add_location(strong, file$1, 49, 4, 1198);
			add_location(p, file$1, 48, 2, 1190);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, strong);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(48:0) {#if isSuccess}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*isSuccess*/ ctx[0]) return create_if_block$1;
		if (/*isError*/ ctx[1]) return create_if_block_1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const awsHandler = "https://6rovexooub.execute-api.eu-west-1.amazonaws.com/production/contact";

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Contact", slots, []);
	let isSuccess = false;
	let isError = false;
	let isLive = false;
	let consentRef;
	let robotRef;

	onMount(() => {
		$$invalidate(2, isLive = true);
	});

	const onSubmit = ev => {
		ev.preventDefault();

		if (consentRef.checked !== true) {
			return;
		}

		if (robotRef.value !== "") {
			$$invalidate(1, isError = true);
			return;
		}

		$$invalidate(2, isLive = false);

		const data = JSON.stringify({
			name: document.querySelector("#contact-name").value,
			replyTo: document.querySelector("#contact-email").value,
			enquiry: document.querySelector("#contact-enquiry").value
		});

		const xhr = new XMLHttpRequest();
		xhr.open("POST", awsHandler, true);
		xhr.setRequestHeader("Accept", "application/json; charset=UTF-8");
		xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");

		xhr.addEventListener("loadend", response => {
			if (response.target.status === 200) {
				$$invalidate(0, isSuccess = true);
			} else {
				$$invalidate(1, isError = true);
			}
		});

		xhr.send(data);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Contact> was created with unknown prop '${key}'`);
	});

	function input2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			consentRef = $$value;
			$$invalidate(3, consentRef);
		});
	}

	function input3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			robotRef = $$value;
			$$invalidate(4, robotRef);
		});
	}

	$$self.$capture_state = () => ({
		onMount,
		awsHandler,
		isSuccess,
		isError,
		isLive,
		consentRef,
		robotRef,
		onSubmit
	});

	$$self.$inject_state = $$props => {
		if ("isSuccess" in $$props) $$invalidate(0, isSuccess = $$props.isSuccess);
		if ("isError" in $$props) $$invalidate(1, isError = $$props.isError);
		if ("isLive" in $$props) $$invalidate(2, isLive = $$props.isLive);
		if ("consentRef" in $$props) $$invalidate(3, consentRef = $$props.consentRef);
		if ("robotRef" in $$props) $$invalidate(4, robotRef = $$props.robotRef);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		isSuccess,
		isError,
		isLive,
		consentRef,
		robotRef,
		onSubmit,
		input2_binding,
		input3_binding
	];
}

class Contact extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Contact",
			options,
			id: create_fragment$1.name
		});
	}
}

const $doc = document.querySelector('.Document');

const $mode = document.querySelector('.Lightbulb');
$mode.addEventListener('click', () => {
  const list = $doc.classList;
  if (list.contains('Lightmode')) {
    list.remove('Lightmode');
    list.add('Darkmode');
    localStorage.setItem('darkmode', 'on');
  } else {
    list.remove('Darkmode');
    list.add('Lightmode');
    localStorage.setItem('darkmode', 'off');
  }
});

const $logo = document.querySelector('#logo');
if ($logo) {
  $logo.innerHTML = '';
  new Logo({
    target: $logo
  });
}

const $form = document.querySelector('#contact-form');
if ($form) {
  $form.innerHTML = '';
  new Contact({
    target: $form
  });
}

if ('fonts' in document && document.querySelector('pre')) {
  const $prism = document.createElement('link');
  $prism.rel = 'stylesheet';
  $prism.href = '/assets/css/prism.css';
  document.head.appendChild($prism);
  var fira = new FontFace(
    'Fira Code',
    "url('/assets/fonts/firacode-variable.woff2') format('woff2')",
    {weight: '1 900'}
  );
  Promise.all([fira.load()]).then((fonts) => {
    fonts.forEach((font) => {
      document.fonts.add(font);
    });
  });
}

if ('serviceWorker' in window.navigator) {
  window.navigator.serviceWorker.register('/sw.js');
}
